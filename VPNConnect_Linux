<#
.SYNOPSIS
Connects to a specified VPN connection profile on Linux.

.DESCRIPTION
This script connects to a VPN using nmcli (NetworkManager) or optionally openconnect.
It prompts securely for the password.

.PARAMETER ConnectionName
The name of the VPN connection profile as known by NetworkManager (nmcli) or the server address/profile for openconnect.

.PARAMETER UserName
The username for the VPN connection.

.PARAMETER UseOpenConnect
(Optional Switch) If specified, uses openconnect instead of nmcli. Requires openconnect to be installed.
You might need to adjust the script to pass the server address instead of a profile name.

.PARAMETER ServerAddress
(Optional) The VPN server address or hostname. Often required when using openconnect directly
instead of a pre-configured profile.

.EXAMPLE
./Connect-VpnLinux.ps1 -ConnectionName "My Work VPN" -UserName "myuser"
# Prompts for password, attempts connection using nmcli with profile "My Work VPN".

.EXAMPLE
./Connect-VpnLinux.ps1 -ConnectionName "vpn.mycompany.com" -UserName "myuser" -UseOpenConnect
# Prompts for password, attempts connection using openconnect to server "vpn.mycompany.com".

.NOTES
Date: 2025-04-02
Requires: PowerShell Core (pwsh) on Linux. NetworkManager (for nmcli) or openconnect installed.
Ensure the script has execute permissions: chmod +x ./Connect-VpnLinux.ps1
nmcli often interacts securely with the desktop keyring (GNOME Keyring, KWallet) for passwords if configured.
#>
param(
    [Parameter(Mandatory=$true)]
    [string]$ConnectionName, # This is the NM profile name OR the server address for openconnect

    [Parameter(Mandatory=$true)]
    [string]$UserName,

    [switch]$UseOpenConnect,

    [string]$ServerAddress # Explicit server address if needed (e.g., for openconnect)
)

# Get credentials securely - Uses standard PowerShell prompt
Write-Host "Please enter the password for VPN user '$UserName':"
$Credential = Get-Credential -UserName $UserName
$Password = $Credential.GetNetworkCredential().Password

try {
    # --- Method 1: Using nmcli (NetworkManager) ---
    if (-not $UseOpenConnect) {
        Write-Host "Attempting to connect VPN '$ConnectionName' using nmcli..."

        # Check if connection profile exists (optional but good practice)
        $nmcliConnections = nmcli -g NAME connection show
        if ($nmcliConnections -notcontains $ConnectionName) {
             # It might be a new connection attempt, or maybe the profile name is wrong.
             Write-Warning "NetworkManager connection profile '$ConnectionName' not found. Attempting connection anyway..."
        }

        # Attempt connection using nmcli
        # nmcli handles secrets via agents (keyrings) or can prompt interactively.
        # Passing password directly is possible but less secure and often not needed.
        # We'll trigger the standard connection which should use the agent or prompt.
        # If direct password passing IS needed (less secure):
        # nmcli connection up $ConnectionName password-flags 0 --ask # Prompts explicitly
        # Or, VERY insecurely: nmcli connection up $ConnectionName password $Password ... (Requires specific VPN type args)
        nmcli connection up $ConnectionName

        # Check exit code (0 usually means success, but nmcli can be complex)
        if ($LASTEXITCODE -eq 0) {
            Write-Host "nmcli command successful. VPN '$ConnectionName' should be connecting or connected."
            # You could add a 'nmcli connection show --active' check after a short delay.
        } else {
            Write-Warning "nmcli command failed with exit code $LASTEXITCODE. Check NetworkManager logs or status."
        }

    # --- Method 2: Using openconnect ---
    } else {
        $targetHost = $ServerAddress # Prefer explicit server address if provided
        if (-not $targetHost) { $targetHost = $ConnectionName } # Fallback to ConnectionName as host if ServerAddress not given

        Write-Host "Attempting to connect to '$targetHost' using openconnect..."

        # Check if openconnect is available
        $openconnectPath = Get-Command openconnect -ErrorAction SilentlyContinue
        if (-not $openconnectPath) {
            throw "openconnect command not found. Please install it (e.g., sudo apt install openconnect / sudo dnf install openconnect)."
        }

        # Use --passwd-on-stdin for better security than command-line args
        Write-Host "Executing openconnect (password passed via stdin)..."
        $Password | openconnect --user=$UserName --passwd-on-stdin $targetHost

        # OpenConnect often runs in the foreground until disconnected or error.
        # Exit code 0 might mean successful launch, but connection could still fail authentication.
        # Or it might fork to background depending on options.
        # Robust checking requires parsing output or managing the process.
        if ($LASTEXITCODE -eq 0) {
             Write-Host "openconnect process launched. Check logs or process status for connection details."
             # Note: Script might hang here if openconnect stays in foreground. Run in background?
        } else {
             Write-Warning "openconnect process failed to launch or exited with code $LASTEXITCODE."
        }
    }

} catch {
    Write-Error "An error occurred during the VPN connection attempt: $($_.Exception.Message)"
} finally {
    # Clear plain text password variable from memory
    Clear-Variable Password -ErrorAction SilentlyContinue
}