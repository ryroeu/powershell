<#
.SYNOPSIS
Connects to a specified VPN profile on macOS.

.DESCRIPTION
This script connects to a VPN configured in macOS System Settings using networksetup.
It prompts securely for the password.
An alternative example using Cisco AnyConnect CLI is included but commented out.

.PARAMETER VpnServiceName
The name of the VPN service/profile as it appears in macOS System Settings -> Network.

.PARAMETER UserName
The username for the VPN connection. This might not be required if the username is saved
in the macOS VPN configuration itself. If needed by the VPN type, provide it.

.EXAMPLE
./Connect-VpnMac.ps1 -VpnServiceName "My Work VPN" -UserName "myuser"
# Prompts for password and attempts to connect using networksetup.

.EXAMPLE
./Connect-VpnMac.ps1 -VpnServiceName "Office VPN L2TP"
# If username is saved in the profile, you might omit -UserName. Prompts for password.

.NOTES
Date: 2025-04-02
Requires: PowerShell Core (pwsh) on macOS. VPN profile configured in System Settings.
Password handling with networksetup can be complex; it often relies on Keychain interaction.
This script attempts a basic connection; manual interaction might still be needed depending on VPN type/config.
Ensure the script has execute permissions: chmod +x ./Connect-VpnMac.ps1
#>
param(
    [Parameter(Mandatory=$true)]
    [string]$VpnServiceName,

    [Parameter(Mandatory=$false)] # Username might be optional depending on VPN config
    [string]$UserName
)

# Get credentials securely - Uses standard PowerShell prompt
Write-Host "Please enter the password for VPN service '$VpnServiceName':"
# Note: UserName in Get-Credential is just for the prompt context here.
# The actual username used might be $UserName parameter or saved in the profile.
#$Credential = Get-Credential -UserName ($UserName | Get-Random) # Use provided username or a placeholder for prompt

# Extract password (needed for some methods, but networksetup might use Keychain)
#$Password = $Credential.GetNetworkCredential().Password

Write-Host "Attempting to connect VPN service '$VpnServiceName' using networksetup..."

# --- Method 1: Using networksetup (for built-in VPN types like L2TP, IPSec) ---
# Note: networksetup's handling of credentials varies. It often interacts with the Keychain.
# Passing passwords directly is not a standard feature and might require osascript or complex workarounds.
# This attempts the connection; macOS may prompt or use saved credentials.
try {
    # Check if the service exists first
    $vpnServices = networksetup -listallnetworkservices
    if ($vpnServices -notcontains $VpnServiceName) {
         throw "VPN Service '$VpnServiceName' not found. Check System Settings -> Network."
    }

    # Attempt connection
    networksetup -connectpppoeservice $VpnServiceName
    # Check connection status - This requires parsing output or checking status separately
    # Giving it a few seconds to establish might be needed before checking.
    Start-Sleep -Seconds 5
    $status = networksetup -showpppoestatus $VpnServiceName
    if ($status -match 'Connected') {
        Write-Host "VPN '$VpnServiceName' connected successfully."
    } else {
        Write-Warning "VPN '$VpnServiceName' connection attempt finished. Status: $status"
        Write-Warning "Manual check or intervention might be required. networksetup might rely on Keychain."
    }

} catch {
    Write-Error "An error occurred while trying to connect using networksetup: $($_.Exception.Message)"
}

# --- Method 2: Example for Cisco AnyConnect CLI (Commented Out) ---
<#
$anyConnectPath = "/opt/cisco/anyconnect/bin/vpn"
$vpnHostOrProfile = "vpn.yourcompany.com" # Or profile name known to AnyConnect

if (Test-Path $anyConnectPath) {
    Write-Host "Attempting connection using Cisco AnyConnect CLI..."
    try {
        # Construct arguments - Check AnyConnect CLI documentation for specifics!
        # Using stdin for password is safer if supported, otherwise use arguments cautiously.
        # Example: & $anyConnectPath connect $vpnHostOrProfile -u $UserName -p $Password
        # Example using stdin (preferred):
        $Password | & $anyConnectPath connect $vpnHostOrProfile -u $UserName --passwd-on-stdin # Hypothetical - check actual syntax!

        # Add logic to check connection status based on AnyConnect CLI output or exit code
        if ($LASTEXITCODE -eq 0) {
             Write-Host "AnyConnect command sent. Check AnyConnect status."
        } else {
             Write-Warning "AnyConnect command finished with exit code $LASTEXITCODE."
        }
    } catch {
        Write-Error "An error occurred executing AnyConnect CLI: $($_.Exception.Message)"
    }
} else {
    # Write-Host "Cisco AnyConnect CLI not found at $anyConnectPath. Skipping."
}
#>

# --- Cleanup ---
finally {
    # Clear plain text password variable from memory
    Clear-Variable Password -ErrorAction SilentlyContinue
}